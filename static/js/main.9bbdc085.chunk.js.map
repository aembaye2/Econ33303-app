{"version":3,"sources":["Navbar/NavbarElements.js","Navbar/index.js","Footer.js","pages/index.js","components/placeholderImage.js","components/utils.js","components/QuestionsComponent.tsx","pages/pset1/data.ts","pages/pset1/Pset1.tsx","pages/pset2/data.ts","pages/pset2/Pset2.tsx","pages/pset3/data.ts","pages/pset3/Pset3.tsx","pages/act00/data.ts","pages/act00/Act00.tsx","pages/act01/data.ts","pages/act01/Act01.tsx","pages/actCh05/data.ts","pages/actCh05/ActCh05.tsx","App.js","index.tsx"],"names":["Nav","styled","nav","_templateObject","_taggedTemplateLiteral","NavLink","Link","_templateObject2","Bars","FaBars","_templateObject3","NavMenu","div","_templateObject4","_templateObject5","_templateObject6","Navbar","React","createElement","Fragment","to","Footer","className","Home","style","display","justifyContent","alignItems","height","placeholderDrawing","version","objects","type","originX","originY","left","top","width","fill","stroke","strokeWidth","strokeDashArray","strokeLineCap","strokeDashOffset","strokeLineJoin","strokeUniform","strokeMiterLimit","scaleX","scaleY","angle","flipX","flipY","opacity","shadow","visible","backgroundColor","fillRule","paintFirst","globalCompositeOperation","skewX","skewY","x1","x2","y1","y2","createTemporaryCanvasAndConvert","canvasElement","document","id","body","appendChild","canvas","fabric","Canvas","forEach","obj","line","Line","add","base64Png","toDataURL","format","quality","console","log","handleGeneratePDF","async","e","questions","userAnswers","fullname","quizName","preventDefault","userInputData","map","question","index","_objectSpread","htmlContent","concat","refName","Ref","imgSrc","process","qtype","options","option","answerText","replace","length","padEnd","substring","combinedCanvasImage","localStorage","getItem","placeholderImage","window","html2pdf","default","opt","margin","filename","image","html2canvas","scale","jsPDF","unit","orientation","from","set","save","QuestionsComponent","_ref","_questions$currentQue","userId","setUserAnswers","useState","setFullname","currentQuestionIndex","setCurrentQuestionIndex","showResults","setShowResults","nextButtonClicked","setNextButtonClicked","filteredModes","setFilteredModes","modes","useEffect","storedAnswers","JSON","parse","drawingKey","initialDrawing","background","setItem","stringify","handleInputChange","questionId","value","prev","x","filter","modeObj","includes","mode","marginTop","onClick","location","reload","marginBottom","onChange","target","marginLeft","textAlign","padding","fontSize","fontWeight","src","alt","maxWidth","href","rel","i","key","name","checked","maxLength","DrawingApp","AssessName","canvasWidth","canvasHeight","handleBack","disabled","mainCanvasId","backgroundCanvasId","mainCanvas","getElementById","backgroundCanvas","error","tempCanvas","tempCtx","getContext","drawImage","dataURL","saveCanvasImage2storage","alert","marginRight","quiz","user","data","Pset1","q","undefined","Pset2","Pset3","Act00","Act01","App","Router","Routes","Route","path","element","ActCh05","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9bbdc085.chunk.js","sourcesContent":["// components/Navbar/navbarElements.js\r\n\r\nimport { FaBars } from \"react-icons/fa\";\r\nimport { NavLink as Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Nav = styled.nav`\r\n  background: #63d471;\r\n  height: 85px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0.2rem calc((100vw - 1000px) / 2);\r\n  z-index: 12;\r\n  /* Third Nav */\r\n  /* justify-content: flex-start; */\r\n`;\r\n\r\nexport const NavLink = styled(Link)`\r\n  color: #808080;\r\n  display: flex;\r\n  align-items: center;\r\n  text-decoration: none;\r\n  padding: 0 1rem;\r\n  height: 100%;\r\n  cursor: pointer;\r\n  &.active {\r\n    color: #000000;\r\n  }\r\n`;\r\n\r\nexport const Bars = styled(FaBars)`\r\n  display: none;\r\n  color: #808080;\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    transform: translate(-100%, 75%);\r\n    font-size: 1.8rem;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const NavMenu = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: -24px;\r\n  /* Second Nav */\r\n  /* margin-right: 24px; */\r\n  /* Third Nav */\r\n  /* width: 100vw;\r\n  white-space: nowrap; */\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const NavBtn = styled.nav`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: 24px;\r\n  /* Third Nav */\r\n  /* justify-content: flex-end;\r\n  width: 100vw; */\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const NavBtnLink = styled(Link)`\r\n  border-radius: 4px;\r\n  background: #808080;\r\n  padding: 10px 22px;\r\n  color: #000000;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  text-decoration: none;\r\n  /* Second Nav */\r\n  margin-left: 24px;\r\n  &:hover {\r\n    transition: all 0.2s ease-in-out;\r\n    background: #fff;\r\n    color: #808080;\r\n  }\r\n`;\r\n","// components/Navbar/index.js\r\n\r\nimport React from \"react\"\r\nimport { Nav, NavLink, Bars, NavMenu } from \"./NavbarElements\"\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <>\r\n      <Nav>\r\n        <Bars />\r\n        <NavMenu>\r\n          <NavLink to=\"/Home\">Home</NavLink>\r\n          <NavLink to=\"/Act00\">Act00</NavLink>\r\n          {/* <NavLink to=\"/ActCh00\">Act00</NavLink> */}\r\n          {/* <NavLink to=\"/ActCh04\">Ch4 Activity</NavLink>\r\n          // <NavLink to=\"/ActCh05\">Ch5 Activity</NavLink>*/}\r\n          {/* <NavLink to=\"/ActCh06\">Ch6 Activity</NavLink> */}\r\n          {/* <NavLink to=\"/Hw01\">Homework 1</NavLink> */}\r\n          <NavLink to=\"/Pset2\">Problem Set 2</NavLink>\r\n          <NavLink to=\"/Pset3\">Problem Set 3</NavLink>\r\n        </NavMenu>\r\n      </Nav>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","// Footer.js\r\nimport React from \"react\"\r\nimport \"./Footer.css\" // Optional: for styling\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p>\r\n        © 2025 aembaye. All rights reserved. No distribution of any material of\r\n        this page\r\n      </p>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","// pages/index.js\r\n\r\nimport React from \"react\"\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"centre\",\r\n        alignItems: \"centre\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <h1>\r\n        Welcome to Econ 33303! Navigate to the Assessment you want or should\r\n        access.\r\n      </h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","const placeholderDrawing = {\r\n  version: \"5.4.2\",\r\n  objects: [\r\n    {\r\n      type: \"line\",\r\n      version: \"5.4.2\",\r\n      originX: \"center\",\r\n      originY: \"center\",\r\n      left: 30.51,\r\n      top: 383.1,\r\n      width: 0,\r\n      height: 0,\r\n      fill: \"#000000\",\r\n      stroke: \"#000000\",\r\n      strokeWidth: 2,\r\n      strokeDashArray: null,\r\n      strokeLineCap: \"butt\",\r\n      strokeDashOffset: 0,\r\n      strokeLineJoin: \"miter\",\r\n      strokeUniform: false,\r\n      strokeMiterLimit: 4,\r\n      scaleX: 1,\r\n      scaleY: 1,\r\n      angle: 0,\r\n      flipX: false,\r\n      flipY: false,\r\n      opacity: 1,\r\n      shadow: null,\r\n      visible: true,\r\n      backgroundColor: \"\",\r\n      fillRule: \"nonzero\",\r\n      paintFirst: \"fill\",\r\n      globalCompositeOperation: \"source-over\",\r\n      skewX: 0,\r\n      skewY: 0,\r\n      x1: 0,\r\n      x2: 0,\r\n      y1: 0,\r\n      y2: 0,\r\n    },\r\n  ],\r\n}\r\n\r\nexport default placeholderDrawing\r\n","//type of questions: \"mc-quest\", \"float-num-quest\" , \"one-line-text-quest\", \"manylines-text-quest\", \"graphing-quest\"\r\n\r\n// import { saveAs } from \"file-saver\"\r\n// import html2pdf from \"html2pdf.js\"\r\nimport { fabric } from \"fabric\"\r\nimport placeholderDrawing from \"./placeholderImage\"\r\n\r\nfunction createTemporaryCanvasAndConvert() {\r\n  // Create a temporary canvas element programmatically\r\n  const canvasElement = document.createElement(\"canvas\")\r\n  canvasElement.id = \"canvas\" // Set id as canvas\r\n  canvasElement.width = 500 // Set canvas width\r\n  canvasElement.height = 500 // Set canvas height\r\n  document.body.appendChild(canvasElement) // Add the canvas to the DOM\r\n\r\n  // Initialize the Fabric.js canvas\r\n  const canvas = new fabric.Canvas(\"canvas\")\r\n\r\n  // Parse and add the drawing objects from the placeholderDrawing\r\n  placeholderDrawing.objects.forEach((obj) => {\r\n    if (obj.type === \"line\") {\r\n      const line = new fabric.Line([obj.x1, obj.y1, obj.x2, obj.y2], {\r\n        left: obj.left,\r\n        top: obj.top,\r\n        fill: obj.fill,\r\n        stroke: obj.stroke,\r\n        strokeWidth: obj.strokeWidth,\r\n        angle: obj.angle,\r\n        opacity: obj.opacity,\r\n        scaleX: obj.scaleX,\r\n        scaleY: obj.scaleY,\r\n        flipX: obj.flipX,\r\n        flipY: obj.flipY,\r\n      })\r\n      canvas.add(line)\r\n    }\r\n  })\r\n\r\n  // After adding objects, convert the canvas to a PNG image in base64\r\n  const base64Png = canvas.toDataURL({\r\n    format: \"png\",\r\n    quality: 1,\r\n  })\r\n\r\n  console.log(base64Png) // This will log the Base64 PNG string\r\n\r\n  // Clean up the canvas after use\r\n  //document.body.removeChild(canvasElement) // Optionally remove the canvas after use\r\n\r\n  return base64Png\r\n}\r\n\r\n// Call the function and get the Base64 PNG\r\n// createTemporaryCanvasAndConvert()\r\n\r\nexport const handleGeneratePDF = async (\r\n  e,\r\n  questions,\r\n  userAnswers,\r\n  fullname,\r\n  quizName\r\n) => {\r\n  e.preventDefault()\r\n\r\n  const userInputData = questions.map((question, index) => ({\r\n    ...question,\r\n    \"user-answer\": userAnswers[index] || \"\",\r\n  }))\r\n\r\n  let htmlContent = `\r\n    <html>\r\n      <head>\r\n        <style>\r\n          body { font-family: Arial, sans-serif; }\r\n          .question { margin-bottom: 20px; }\r\n          .answer { margin-top: 10px; white-space: pre-wrap; }\r\n          .manylines-text-quest { height: 200px; overflow: hidden; }\r\n          .graphing-quest { margin-top: 10px; }\r\n          .graphing-quest img { width: 200px; height: 150px; } /* Adjust the size of the embedded graph */\r\n          .ref-info-img img { width: 100%; height: 50%; } /* Adjust the size of the embedded graph */\r\n          .ref-name { margin-bottom: 20px; }\r\n        </style>\r\n      </head>\r\n      <body>\r\n       <h3 style=\"text-align: center;\">Pdf Report for ${quizName}</h3>\r\n        <h1>Full Name: ${fullname}</h1>\r\n  `\r\n\r\n  userInputData.forEach((question, index) => {\r\n    let refName = question.Ref[3]\r\n    let imgSrc = process.env.PUBLIC_URL + \"/\" + question.Ref[1]\r\n    if (refName) {\r\n      htmlContent += `<div style=\"font-size: 24px; font-weight: bold;\">\r\n        ${refName}\r\n      </div>\r\n      `\r\n    }\r\n    if (imgSrc) {\r\n      htmlContent += `<div class=\"ref-info-img \"><img src=\"${imgSrc}\" alt=\"info\" /></div>`\r\n    }\r\n    htmlContent += `\r\n      <div class=\"question\">\r\n        <p>${index + 1}. ${question.question}</p>\r\n    `\r\n\r\n    if (question.qtype === \"mc-quest\") {\r\n      question.options.forEach((option) => {\r\n        htmlContent += `<p>${option}</p>`\r\n      })\r\n    }\r\n\r\n    if (question.qtype === \"manylines-text-quest\") {\r\n      let answerText = `<strong>Answer:</strong> ${question[\"user-answer\"]}`\r\n      answerText = answerText.replace(/\\s\\s+/g, \" \")\r\n\r\n      if (answerText.length < 1000) {\r\n        answerText = answerText.padEnd(1000, \" \")\r\n      } else if (answerText.length > 1000) {\r\n        answerText = answerText.substring(0, 1000) + \"...\"\r\n      }\r\n      htmlContent += `<div class=\"answer manylines-text-quest\">${answerText}</div>`\r\n    } else if (question.qtype === \"graphing-quest\") {\r\n      const combinedCanvasImage = localStorage.getItem(\r\n        `${quizName}-canvasImage-${index}`\r\n      )\r\n      htmlContent += `<div ><strong>Answer:</strong></div>`\r\n      if (combinedCanvasImage) {\r\n        htmlContent += `<div class=\"answer graphing-quest\"><img src=\"${combinedCanvasImage}\" alt=\"Graphing Answer\" /></div>`\r\n      } else {\r\n        // Convert placeholderDrawing to an image\r\n        const placeholderImage = createTemporaryCanvasAndConvert()\r\n        htmlContent += `<div class=\"answer graphing-quest\"><img src=\"${placeholderImage}\" alt=\"Graphing Answer\" /></div>`\r\n      }\r\n    } else {\r\n      htmlContent += `<div class=\"answer\"> <strong>Answer:</strong> ${question[\"user-answer\"]}</div>`\r\n    }\r\n\r\n    htmlContent += `</div>`\r\n  })\r\n\r\n  htmlContent += `\r\n      </body>\r\n    </html>\r\n  `\r\n\r\n  // Dynamically import html2pdf.js on the client side\r\n  if (typeof window !== \"undefined\") {\r\n    const html2pdf = (await import(\"html2pdf.js\")).default\r\n\r\n    // Convert HTML to PDF\r\n    const opt = {\r\n      margin: 1,\r\n      filename: `MyPdfReport4${quizName}.pdf`,\r\n      image: { type: \"jpeg\", quality: 0.98 },\r\n      html2canvas: { scale: 2 },\r\n      jsPDF: { unit: \"in\", format: \"letter\", orientation: \"portrait\" },\r\n    }\r\n\r\n    html2pdf().from(htmlContent).set(opt).save()\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\"\r\n//import { handleJsonSave, handleGeneratePDF } from \"./utils\";\r\nimport { handleGeneratePDF } from \"./utils\"\r\n//import { fabric } from \"fabric\";\r\n//import { useCanvasStore } from \"./canvas/useCanvasStore\"\r\n//import { saveAs } from \"file-saver\"\r\nimport { DrawingApp, modes } from \"ae-drawable-canvas\"\r\n\r\ninterface QuizProps {\r\n  questions: {\r\n    qtype: string\r\n    question: string\r\n    options?: string[]\r\n    Ref: string | string[]\r\n  }[]\r\n  userId: string | undefined\r\n  quizName: string\r\n}\r\n\r\nconst QuestionsComponent = ({ questions, userId, quizName }: QuizProps) => {\r\n  const [userAnswers, setUserAnswers] = useState<{\r\n    [key: number]: string | number\r\n  }>({})\r\n  const [fullname, setFullname] = useState(\"\")\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\r\n  const [showResults, setShowResults] = useState(false)\r\n  const [nextButtonClicked, setNextButtonClicked] = useState(false)\r\n  const [filteredModes, setFilteredModes] = useState(modes)\r\n\r\n  useEffect(() => {\r\n    const storedAnswers = localStorage.getItem(\"userAnswers\")\r\n    if (storedAnswers) {\r\n      setUserAnswers(JSON.parse(storedAnswers))\r\n    }\r\n\r\n    questions.forEach((question, index) => {\r\n      if (question.qtype === \"graphing-quest\") {\r\n        const drawingKey = `${quizName}-canvasDrawing-${index}`\r\n        if (!localStorage.getItem(drawingKey)) {\r\n          const initialDrawing = { objects: [], background: \"\" }\r\n          localStorage.setItem(drawingKey, JSON.stringify(initialDrawing))\r\n        }\r\n      }\r\n    })\r\n  }, [questions, quizName])\r\n\r\n  const saveCanvasImage2storage = async (index: number) => {\r\n    const mainCanvasId = `canvas-${index}`\r\n    const backgroundCanvasId = `backgroundimage-canvas-${index}`\r\n\r\n    const mainCanvas = document.getElementById(\r\n      mainCanvasId\r\n    ) as HTMLCanvasElement\r\n    const backgroundCanvas = document.getElementById(\r\n      backgroundCanvasId\r\n    ) as HTMLCanvasElement\r\n\r\n    if (!mainCanvas || !backgroundCanvas) {\r\n      console.error(\"Canvas elements not found\")\r\n      return null\r\n    }\r\n\r\n    const tempCanvas = document.createElement(\"canvas\")\r\n    tempCanvas.width = mainCanvas.width\r\n    tempCanvas.height = mainCanvas.height\r\n    const tempCtx = tempCanvas.getContext(\"2d\")\r\n\r\n    if (!tempCtx) {\r\n      console.error(\"Failed to get 2D context\")\r\n      return null\r\n    }\r\n\r\n    tempCtx.drawImage(\r\n      backgroundCanvas,\r\n      0,\r\n      0,\r\n      tempCanvas.width,\r\n      tempCanvas.height\r\n    )\r\n    tempCtx.drawImage(mainCanvas, 0, 0, tempCanvas.width, tempCanvas.height)\r\n\r\n    const dataURL = tempCanvas.toDataURL(\"image/png\")\r\n    localStorage.setItem(`${quizName}-canvasImage-${index}`, dataURL)\r\n  }\r\n\r\n  const handleInputChange = (questionId: any, value: any) => {\r\n    setUserAnswers((prev) => ({\r\n      ...prev,\r\n      [questionId]: value,\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (questions[currentQuestionIndex].qtype === \"graphing-quest\") {\r\n      var x: string[] = questions[currentQuestionIndex].options || []\r\n      setFilteredModes(modes.filter((modeObj: any) => x.includes(modeObj.mode)))\r\n    }\r\n  }, [currentQuestionIndex])\r\n\r\n  const handleNext = async () => {\r\n    setNextButtonClicked(true)\r\n    localStorage.setItem(\"userAnswers\", JSON.stringify(userAnswers))\r\n\r\n    if (questions[currentQuestionIndex].qtype === \"graphing-quest\") {\r\n      await saveCanvasImage2storage(currentQuestionIndex)\r\n    }\r\n\r\n    if (currentQuestionIndex === questions.length - 2) {\r\n      alert(\r\n        \"Please don't forget to download the PDF and submit it to gradescope after you do the last question. Finishing the assessment may save your work temporarly to your browser but it doesn't submit it to the server where the instructor has access.\"\r\n      )\r\n    }\r\n    if (currentQuestionIndex !== questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1)\r\n    } else {\r\n      setShowResults(true)\r\n    }\r\n  }\r\n\r\n  const handleBack = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(currentQuestionIndex - 1)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-[100px]\">\r\n      <div className=\"max-w-[1500px] mx-auto w-[90%] flex justify-center py-10 flex-col\">\r\n        <form>\r\n          {!showResults ? (\r\n            <>\r\n              <div style={{ marginBottom: \"30px\" }}>\r\n                <label>\r\n                  Full Name:\r\n                  <input\r\n                    type=\"text\"\r\n                    value={fullname}\r\n                    onChange={(e) => setFullname(e.target.value)}\r\n                    style={{\r\n                      marginLeft: \"10px\",\r\n                      width: \"400px\",\r\n                      height: \"40px\",\r\n                    }}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  textAlign: \"right\",\r\n                  padding: \"20px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n              >\r\n                <h3 style={{ margin: 0 }}>\r\n                  Question: {currentQuestionIndex + 1}\r\n                  <span>/{questions.length}</span>\r\n                </h3>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={(e) =>\r\n                    handleGeneratePDF(\r\n                      e,\r\n                      questions,\r\n                      userAnswers,\r\n                      fullname,\r\n                      quizName\r\n                    )\r\n                  }\r\n                >\r\n                  {currentQuestionIndex === questions.length - 1\r\n                    ? \"Download PDF File\"\r\n                    : \"Download PDF File\"}\r\n                </button>\r\n              </div>\r\n              <div style={{ marginBottom: \"20px\" }}>\r\n                <div style={{ marginBottom: \"20px\" }}>\r\n                  {questions &&\r\n                    questions.length > 0 &&\r\n                    currentQuestionIndex >= 0 &&\r\n                    questions[currentQuestionIndex].Ref.length > 0 && (\r\n                      <>\r\n                        <div style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n                          {`${questions[currentQuestionIndex].Ref[3]}`}\r\n                        </div>\r\n                        {questions[currentQuestionIndex].Ref[0] === \"img\" && (\r\n                          <img\r\n                            src={\r\n                              process.env.PUBLIC_URL +\r\n                              \"/\" +\r\n                              questions[currentQuestionIndex].Ref[1]\r\n                            }\r\n                            alt=\"Question Reference\"\r\n                            style={{ maxWidth: \"75%\", marginTop: \"10px\" }}\r\n                          />\r\n                        )}\r\n                        {questions[currentQuestionIndex].Ref[0] ===\r\n                          \"url_link\" && (\r\n                          <>\r\n                            <div>\r\n                              {questions[currentQuestionIndex].Ref[2] && (\r\n                                <span>\r\n                                  {questions[currentQuestionIndex].Ref[2]}&nbsp;\r\n                                </span>\r\n                              )}\r\n                              <a\r\n                                href={questions[currentQuestionIndex].Ref[1]}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\"\r\n                              >\r\n                                {questions[currentQuestionIndex].Ref[1]}\r\n                              </a>\r\n                            </div>\r\n                          </>\r\n                        )}\r\n                      </>\r\n                    )}\r\n                  <br />\r\n                  {currentQuestionIndex < questions.length && (\r\n                    <div style={{ marginTop: \"20px\" }}>\r\n                      <label\r\n                        style={{\r\n                          fontSize: \"20px\",\r\n                        }}\r\n                      >\r\n                        {currentQuestionIndex + 1}.{\" \"}\r\n                        {questions[currentQuestionIndex].question}\r\n                      </label>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {questions[currentQuestionIndex].qtype === \"mc-quest\" && (\r\n                  <div>\r\n                    {questions[currentQuestionIndex].options?.map(\r\n                      (option, i) => (\r\n                        <div key={i}>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name={`question-${currentQuestionIndex}`}\r\n                            value={option}\r\n                            checked={\r\n                              userAnswers[currentQuestionIndex] === option\r\n                            }\r\n                            onChange={() =>\r\n                              handleInputChange(currentQuestionIndex, option)\r\n                            }\r\n                          />\r\n                          {option}\r\n                        </div>\r\n                      )\r\n                    )}\r\n                  </div>\r\n                )}\r\n                {questions[currentQuestionIndex].qtype ===\r\n                  \"float-num-quest\" && (\r\n                  <div style={{ marginTop: \"10px\" }}>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={userAnswers[currentQuestionIndex] || \"\"}\r\n                      style={{ height: \"35px\", fontSize: \"16px\" }}\r\n                      onChange={(e) =>\r\n                        handleInputChange(currentQuestionIndex, e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                )}\r\n                {questions[currentQuestionIndex].qtype ===\r\n                  \"one-line-text-quest\" && (\r\n                  <div style={{ marginTop: \"10px\" }}>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={userAnswers[currentQuestionIndex] || \"\"}\r\n                      maxLength={150}\r\n                      style={{\r\n                        width: \"90%\",\r\n                        height: \"35px\",\r\n                        fontSize: \"20px\",\r\n                      }}\r\n                      onChange={(e) =>\r\n                        handleInputChange(currentQuestionIndex, e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                )}\r\n                {questions[currentQuestionIndex].qtype ===\r\n                  \"manylines-text-quest\" && (\r\n                  <div style={{ marginTop: \"10px\" }}>\r\n                    <textarea\r\n                      value={userAnswers[currentQuestionIndex] || \"\"}\r\n                      maxLength={1000}\r\n                      style={{\r\n                        width: \"96%\",\r\n                        height: \"200px\",\r\n                        fontSize: \"20px\",\r\n                      }}\r\n                      onChange={(e) =>\r\n                        handleInputChange(currentQuestionIndex, e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                )}\r\n                {questions[currentQuestionIndex].qtype === \"graphing-quest\" && (\r\n                  <div\r\n                    style={{\r\n                      marginTop: \"50px\",\r\n                      marginLeft: \"50px\",\r\n                      marginBottom: \"500px\",\r\n                    }}\r\n                  >\r\n                    <DrawingApp\r\n                      index={currentQuestionIndex}\r\n                      AssessName={quizName || \"\"}\r\n                      canvasWidth={600}\r\n                      canvasHeight={450}\r\n                      nextButtonClicked={nextButtonClicked}\r\n                      modes={filteredModes}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  marginTop: \"20px\",\r\n                }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleBack}\r\n                  disabled={currentQuestionIndex === 0}\r\n                >\r\n                  {currentQuestionIndex === 0 ? \"\" : \"← Previous Question\"}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleNext}\r\n                  style={{ marginRight: \"200px\" }}\r\n                >\r\n                  {currentQuestionIndex === questions.length - 1\r\n                    ? \"Finish Assessment\"\r\n                    : \"Next Question →\"}\r\n                </button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"text-center\">\r\n              <div style={{ marginTop: \"20px\" }}>\r\n                <h3> You have successfully completed {quizName} ...! 📈</h3>\r\n              </div>\r\n              <div style={{ marginTop: \"20px\" }}>\r\n                <button onClick={() => window.location.reload()}>\r\n                  Restart Assessement →\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionsComponent\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"If the free market (competitive) equilibrium maximizes social efficiency, there is no rational for government intervention in an economy. Answer True or False and then defend your answer.\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"float-num-quest\",\r\n      question:\r\n        \"Consider the market for cars with demand 𝑄𝐷=1000-10𝑃 and supply equal to 𝑄𝑆=10 + 5𝑃, the value of the consumer surplus is (answer in two decimal place):\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"float-num-quest\",\r\n      question:\r\n        \"... Continuing from previous question, the value of the producer surplus is\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"float-num-quest\",\r\n      question:\r\n        \"... Continuing from previous question, now the government forces the producer to charge only $50 and supply a quantity that consumers demand at this price. If the producer comply, the value of deadweight loss of over production is: <br><br><br><br><br><br><br><br><br>\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"A family makes the decision between enjoying a composite good consumption (C) and having kids (K). Assume the price of having kids is Pk and that of C is $1 as it is a composite good. Draw the budget constraint of this family putting C on the vertical axis and K on the horizontal axis and label all axes and your sketches.\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Now draw an the initial optimal point of this family as e1 with appropriate budget constraint and indifference curve. Now assuming that kids are inferior goods/services, show the new optimal point as e2 if the income of the family increases.\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Again, starting from the initial optimal point of this family as e1, suppose the price of having kids becomes cheaper, other things equal. Show the shift in the budget constraint and the possible point of family's new optimal point e2. And show the substitution and income effects of this decrease in price of having kids still assuming that kids are inferior goods.\",\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Labor Supply Question: Showing an initial optimal point e1 of a consumer-worker in consumption (C)-leisure (l) space (leisure on the x-axis) given below, show the effect of an increase of passive (virtual) income YV (such as investment income from stocks) on the budget constraint if leisure is a normal good.\",\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Starting from an initial optimal point in the consumption-leisure space, show the effect of decrease in wage rate in which the worker supplies more hours in the labor market (leisure is still normal good).\",\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Show substitution and income effects of this person graphically by decomposing the total effect in from the previous question.\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"(Refer to the above table) According to the estimates , what is the expected impact of a $1000 increase in welfare benefits on the number of hours worked?\",\r\n      options: [\r\n        \"A. The number of hours worked falls by about 15\",\r\n        \"B. The number of hours worked falls by about 1,560\",\r\n        \"C. The number of hours worked falls by about 183\",\r\n        \"D. The number of hours worked falls by about 1,830\",\r\n      ],\r\n      Ref: \"img01.png\",\r\n    },\r\n\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"From the above table, is the coefficient of TANF benefits statistically significant at the 5% level? why or why not\",\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React from \"react\"\r\n//import QuizManual from \"@/components/Quiz\";\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\n//import { quiz } from \"./data\"; // Import the quiz data from data.ts\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"Pset1\" // Name of the quiz\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Pset1 = () => {\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n  const isAvailable = true //false\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pset1\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"In each of the following cases, state what type of externality the example is: positive or negative, and whether it is a consumption or production externality. \\n  a. smoking by individuals  \\n b. toxic waste production by firms \\n c. research and development by a high-tech firm \\n d. individual vaccination against communicable illness\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"(Refer to the Reference 1 above) What is the socially optimal level of each firm's pollution reduction? Show your work below your answer as QA=?, QB=?, QT=? and show your work concisely.\",\r\n      Ref: [\r\n        \"img\",\r\n        \"hw2_img01.png\",\r\n        \"Use the folowing to answer the questions below.\",\r\n        \"Reference 1: Pollution Reduction\",\r\n      ],\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"(Refer to the Reference 1 above) Compare the social efficiency of three possible outcomes. (a) require both firms to reduce pollution by the same amount. Would this be efficient? why or why not?\",\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"(Refer to the Reference 1 above) Compare the social efficiency of three possible outcomes. (b) charge a common tax per unit of pollution. Would this be efficient? why or why not?\",\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"(Refer to the Reference 1 above) Compare the social efficiency of three possible outcomes. (c) require both firms to reduce pollution by the same amount, but allow pollution permits to be bought and sold. Would this be efficient? why or why not?\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"(Refer to the Reference 2 above)  If the taxes are set so that each resident shares the cost evenly (p1= p2= p3= 18/3), how many paths will get built. Enter your answer separated by commma or semicolon QX, QY, QZ and Q*? (Hint: how many units of the good would each resident demand at this price)\",\r\n      Ref: [\r\n        \"img\",\r\n        \"hw2_img02.png\",\r\n        \"Use the folowing to answer the questions below.\",\r\n        \"Reference 2: Pulbic Goods\",\r\n      ],\r\n    },\r\n\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"(Refer to the Reference 2 above)  What is the socially optimal number of parks? Show how the government can achieve the social optimum by setting the correct tax prices p1, p2, and p3 so that the cost is paid.\",\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React from \"react\"\r\n//import QuizManual from \"@/components/Quiz\";\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\n//import { quiz } from \"./data\"; // Import the quiz data from data.ts\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"Pset2\" // Name of the quiz\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Pset2 = () => {\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n  const isAvailable = true //false\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pset2\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"Given the above information, a) Who bears the statutory incidence of a $2 per unit tax on the sale of rutabagas? Why? \",\r\n      options: [],\r\n      Ref: [\r\n        \"img\",\r\n        \"pset_img01.png\",\r\n        \"Use the folowing to answer the questions below.\",\r\n        \"Reference 1: Tax Incidence\",\r\n      ],\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"Given the above  information, b) Who bears the economic incidence of this tax? Show the calculations\",\r\n      options: [],\r\n      Ref: [\r\n        \"img\",\r\n        \"pset_img01.png\",\r\n        \"Use the folowing to answer the questions below.\",\r\n        \"Reference 1: Tax Incidence\",\r\n      ],\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"c) sketch the graph showing the sharing of the tax burden in the previous question (ignore the numbers or scale of the axes)\",\r\n      options: [\r\n        \"line\",\r\n        \"point\",\r\n        \"rectangle\",\r\n        \"coordinate\",\r\n        \"rect\",\r\n        \"text\",\r\n        \"singlearrowhead\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"Write down the numerical value of the deadweight loss and show your calculations.\",\r\n      Ref: [\r\n        \"img\",\r\n        \"pset_img02.png\",\r\n        \"Use the folowing to answer the questions below.\",\r\n        \"Reference 1: Tax Incidence\",\r\n      ],\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"Briefly state why taxes create deadweight losses in this context.\",\r\n      Ref: [\r\n        \"img\",\r\n        \"pset_img02.png\",\r\n        \"Use the folowing to answer the questions below.\",\r\n        \"Reference 1: DWL of taxation\",\r\n      ],\r\n    },\r\n\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Show graphically, why a monopolist cannot fully transfer tax burden of a sales tax even though it is a price maker. Do the graphing here and you will give your explanation in the next question\",\r\n      options: [\r\n        \"line\",\r\n        \"point\",\r\n        \"rectangle\",\r\n        \"coordinate\",\r\n        \"rect\",\r\n        \"text\",\r\n        \"singlearrowhead\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"Give economics way of thinking to explain why a monopolist cannot fully transfer tax burden of a sales tax eventhough it is a price maker.\",\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"What does the term 'tax incidence' refer to?\",\r\n      options: [\r\n        \"A. The amount of tax paid by the government\",\r\n        \"B. The division of the tax burden between consumers and producers\",\r\n        \"C. The total tax revenue collected by the government\",\r\n        \"D. The rate at which taxes increase over time\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"When the supply curve is perfectly elastic, who is most likely to bear the burden of the tax?\",\r\n      options: [\r\n        \"A. The government\",\r\n        \"B. The producer\",\r\n        \"C. The consumer\",\r\n        \"D. Both share the burden equally\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"When the demand for a good is more elastic than the supply, who is more likely to bear the tax burden?\",\r\n      options: [\r\n        \"A. The consumers\",\r\n        \"B. The producers\",\r\n        \"C. Both share the burden equally\",\r\n        \"D. The government\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"If a tax is imposed on a good with price elasticity of demand of .5 and price elasticity of supply of .25, what percent of the tax will be born by the consumers?\",\r\n      options: [\"A. 100%.\", \"B. 25%.\", \"C. 50%.\", \"D. 67%.\"],\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"From efficiency ground, which good must be taxed heavily?\",\r\n      options: [\"A. private jets.\", \"B. alcohol.\", \"C. bread.\", \"D. jeans.\"],\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React from \"react\"\r\n//import QuizManual from \"@/components/Quiz\";\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\n//import { quiz } from \"./data\"; // Import the quiz data from data.ts\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"Pset3\" // Name of the quiz\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Pset3 = () => {\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n  const isAvailable = true //false\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default  Pset3\r\n","//qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\nexport const quiz = {\r\n  questions: [\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"What is the capital of France\",\r\n      options: [\"A. London\", \"B. Paris\", \"C. Amsterdam\", \"D. Berlin\"],\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"float-num-quest\",\r\n      question: \"If x=5, what is the value of 2x+3?\",\r\n      options: [],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"What happens to the price of a good when the demand for the good increases?\",\r\n      options: [],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Draw the supply and demand diagram. What happens to equilibrium price and quantity when the income of consumers goes up. Assume the good is a normal good. Show it by shifting the appropriate curve.\",\r\n      options: [],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question: \"What is the above graph about? Discuss in detail \",\r\n      options: [],\r\n      Ref: [\r\n        \"img\",\r\n        \"hw2_img01.png\",\r\n        \"Use the folowing to answer the questions below.\",\r\n        \"Reference 1: Pollution Reduction\",\r\n      ],\r\n    },\r\n  ],\r\n}\r\n","import React from \"react\"\r\n//import QuizManual from \"@/components/Quiz\";\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\n// @ts-ignore\r\n//import { QuestionsComponent } from \"hw-sys-components\"\r\n//import { quiz } from \"./data\"; // Import the quiz data from data.ts\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"Act00\" // Name of the quiz\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Act00 = () => {\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n  const isAvailable = true //false\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Act00\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"A family makes the decision between enjoying a composite good consumption (C) and having kids (K). Assume the price of having kids is Pk and that of C is $1 as it is a composite good. Draw the budget constraint of this family putting C on the vertical axis and K on the horizontal axis and label all axes and your sketches.\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Now draw an the initial optimal point of this family as e1 with appropriate budget constraint and indifference curve. Now assuming that kids are inferior goods/services, show the new optimal point as e2 if the income of the family increases.\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Again, starting from the initial optimal point of this family as e1, suppose the price of having kids becomes cheaper, other things equal. Show the shift in the budget constraint and the possible point of family's new optimal point e2. And show the substitution and income effects of this decrease in price of having kids still assuming that kids are inferior goods.\",\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React from \"react\"\r\n//import QuizManual from \"@/components/Quiz\";\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\n//import { quiz } from \"./data\"; // Import the quiz data from data.ts\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"Pset1\" // Name of the quiz\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Act01 = () => {\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n  const isAvailable = true //false\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Act01\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Draw the graph of pollution reduction when the marginal damage (averted) is flat ...\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"From the above graph, explain why the DWL from using a tax is smaller than the DWL from using quantity regulartion.  \",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Now draw the graph of pollution reduction when the marginal damage (averted) is steep ...\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question:\r\n        \"From the above graph, explain why the DWL from using a tax is bigger than the DWL from using quantity regulartion.\",\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React from \"react\"\r\n//import QuizManual from \"@/components/Quiz\";\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\n//import { quiz } from \"./data\"; // Import the quiz data from data.ts\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"ActCh05\" // Name of the quiz\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Act01 = () => {\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n  const isAvailable = true //false\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Act01\r\n","// App.js\nimport React from \"react\"\n//import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\"\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\"\nimport \"./App.css\"\nimport Navbar from \"./Navbar\"\nimport Footer from \"./Footer\" // Import the Footer component\n\nimport Home from \"./pages\"\nimport Pset1 from \"./pages/pset1/Pset1\"\nimport Pset2 from \"./pages/pset2/Pset2\"\nimport Pset3 from \"./pages/pset3/Pset3\"\nimport Act00 from \"./pages/act00/Act00\"\nimport Act01 from \"./pages/act01/Act01\"\nimport ActCh05 from \"./pages/actCh05/ActCh05\"\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Navbar />\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/Home\" element={<Home />} />\n            <Route path=\"/Pset1\" element={<Pset1 />} />\n            <Route path=\"/Pset2\" element={<Pset2 />} />\n            <Route path=\"/Pset3\" element={<Pset3 />} />\n            <Route path=\"/Act00\" element={<Act00 />} />\n            <Route path=\"/Act01\" element={<Act01 />} />\n            <Route path=\"/ActCh05\" element={<ActCh05 />} />\n          </Routes>\n        </div>\n        <Footer />\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","//index.tsx\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n//import ReactDOM from \"react-dom/client\";\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}